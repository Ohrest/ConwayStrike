{"version":3,"sources":["chatBox.js","App.js","serviceWorker.js","index.js"],"names":["ChatBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","messages","handleSubmit","bind","assertThisInitialized","handleChange","_this2","passSocket","on","data","setState","emit","messageEmitted","event","preventDefault","length","target","value","react_default","a","createElement","className","Table","striped","bordered","hover","variant","map","txt","Form","onSubmit","Group","controlId","Label","Control","type","onChange","placeholder","Button","Component","CELL_SIZE","WIDTH","HEIGHT","socket","io","Cell","_this$props","x","y","style","left","concat","top","width","height","App","handleClick","elemOffset","getElementOffset","offsetX","clientX","getScrollFromLeft","offsetY","clientY","getScrollFromTop","Math","floor","console","log","typeOfPattern","rows","cols","cells","usersOnline","iterations","handlePatternChange","connectionStatus","rect","boardRef","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","_this3","backgroundSize","onClick","ref","n","cell","App_Cell","key","connected","class","selected","chatBox","scrollTop","body","scrollLeft","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f999256.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, ListGroup, Table } from \"react-bootstrap\";\nimport StayScrolled from \"react-stay-scrolled\";\n\nclass ChatBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n      messages: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.passSocket.on(\"updatedMessages\", data => this.setState({ messages: data }) );\n    this.props.passSocket.emit(\"newMessage\", {\n      messageEmitted: \"New user connected\"\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.message.length > 0 && this.state.message.length < 100)\n      this.props.passSocket.emit(\"newMessage\", {\n        messageEmitted: this.state.message\n      });\n    this.setState({ message: \"\" });\n  }\n\n  handleChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"Form1\">\n        <br />\n        <div className=\"messageList\">\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>Chat Box</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.messages.map(txt => (\n                <tr>{txt}</tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Group controlId=\"formBasicMessage\">\n            <Form.Label>Type message</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={this.state.message}\n              onChange={this.handleChange}\n              placeholder=\"Enter message..\"\n            />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Send\n          </Button>\n        </Form>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default ChatBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ChatBox from \"./chatBox\";\nimport { Form, Button } from \"react-bootstrap\";\nimport * as io from \"socket.io-client\";\n\nimport { Popover } from \"react-bootstrap\";\n\nconst CELL_SIZE = 10;\nconst WIDTH = 1600;\nconst HEIGHT = 800;\n\nconst socket = io.connect(\"http://34.76.167.112:7856\");\n\nclass Cell extends Component {\n  render() {\n    const { x, y } = this.props;\n    return (\n      <div\n        className=\"Cell\"\n        style={{\n          left: `${CELL_SIZE * x + 1}px`,\n          top: `${CELL_SIZE * y + 1}px`,\n          width: `${CELL_SIZE - 1}px`,\n          height: `${CELL_SIZE - 1}px`\n        }}\n      />\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n\n    this.state = {\n      cells: [],\n      usersOnline: 0,\n      typeOfPattern: \"2\",\n      iterations: 0\n    };\n    this.handlePatternChange = this.handlePatternChange.bind(this);\n  }\n\n  componentDidMount() {\n    socket.on(\"message\", data => this.setState({ connectionStatus: data }));\n    socket.on(\"cells\", data => this.setState({ cells: data }));\n    socket.on(\"usersOnlineUpdate\", data =>\n      this.setState({ usersOnline: data })\n    );\n    socket.on(\"iterationsUpdate\", data => this.setState({ iterations: data }));\n  }\n\n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    };\n  }\n\n  handleClick = event => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = event.clientX + getScrollFromLeft() - elemOffset.x;\n    const offsetY = event.clientY + getScrollFromTop() - elemOffset.y;\n\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n    console.log(x, y);\n\n    console.log('scrollTOp: ', getScrollFromTop(), 'scrollleft: ', getScrollFromLeft() );\n\n    socket.emit(\"cellUpdate\", {\n      x: y,\n      y: x,\n      typeOfPattern: this.state.typeOfPattern\n    });\n  };\n\n  handlePatternChange(event) {\n    this.setState({ typeOfPattern: event.target.value });\n  }\n\n  render() {\n    const { cells } = this.state;\n    return (\n      <div className=\"App\">\n        <div\n          className=\"Board\"\n          style={{\n            width: WIDTH,\n            height: HEIGHT,\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n          }}\n          onClick={this.handleClick}\n          ref={n => {\n            this.boardRef = n;\n          }}\n        >\n          {cells.map(cell => (\n            <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`} />\n          ))}\n        </div>\n\n        <div className=\"chat-sidebar\">\n          <div>\n            Server Status:\n            {socket.connected != true ? (\n              <span class=\"badge badge-secondary\">\n                Waiting for connection..\n              </span>\n            ) : (\n              <span class=\"badge badge-success\">Connected</span>\n            )}{\" \"}\n            Users Online: {this.state.usersOnline} <br />\n            Pattern:\n            <select\n              class=\"mdb-select md-form\"\n              onChange={this.handlePatternChange}\n            >\n              <option value=\"1\" selected>\n                Blinker\n              </option>\n              <option value=\"2\">Glider</option>\n              <option value=\"3\">Lightweight spaceship (LWSS)</option>\n            </select>\n            Iterations: {this.state.iterations}\n            <ChatBox passSocket={socket} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nfunction getScrollFromTop() {\n  return window.pageYOffset ||  //most browsers\n       (document.documentElement &&\n          document.documentElement.scrollTop) || //\n       document.body.scrollTop;\n}\n\nfunction getScrollFromLeft() {\n  return window.pageXOffset ||  //most browsers\n       (document.documentElement &&\n          document.documentElement.scrollLeft) || //\n       document.body.scrollLeft;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}