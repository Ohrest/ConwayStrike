{"version":3,"sources":["Images/BlueFlag.png","Images/RedFlag.png","chatBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ChatBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","messages","handleSubmit","bind","assertThisInitialized","handleChange","_this2","passSocket","on","data","setState","event","preventDefault","length","emit","messageEmitted","teamAssigned","target","value","react_default","a","createElement","className","Table","striped","bordered","hover","variant","map","txt","style","color","Form","onSubmit","Group","controlId","Label","Control","type","onChange","placeholder","Button","Component","CELL_SIZE","WIDTH","HEIGHT","socket","io","Cell","_this$props","x","y","left","concat","top","width","height","background","App","handleClick","elemOffset","getElementOffset","offsetX","clientX","window","pageXOffset","document","documentElement","scrollLeft","body","offsetY","clientY","pageYOffset","scrollTop","x1","x2","y1","y2","line","x3","y3","console","log","Math","floor","typeOfPattern","rows","cols","cells","usersOnline","iterations","scores","blue","red","connectionStatus","connected","handlePatternChange","rect","boardRef","getBoundingClientRect","doc","clientLeft","clientTop","_this3","backgroundSize","onClick","ref","n","src","BlueFlag","marginTop","marginLeft","position","RedFlag","cell","App_Cell","key","stroke","strokeWidth","class","selected","fontSize","chatBox","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07dc373f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BlueFlag.259d4dd6.png\";","module.exports = __webpack_public_path__ + \"static/media/RedFlag.ca8dbb3a.png\";","import React, { Component } from \"react\";\nimport { Form, Button, ListGroup, Table } from \"react-bootstrap\";\nimport StayScrolled from \"react-stay-scrolled\";\n\nclass ChatBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n      messages: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.passSocket.on(\"updatedMessages\", data => this.setState({ messages: data }) );\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.message.length > 0 && this.state.message.length < 100)\n    {\n      //this.props.passSocket.emit(\"newMessage\", this.state.message);\n\n      this.props.passSocket.emit(\"newMessage\", {\n        messageEmitted: this.state.message,\n        teamAssigned: this.props.teamAssigned\n      });\n\n    this.setState({ message: \"\" });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"Form1\">\n        <br />\n        <div className=\"messageList\">\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>Chat Box</th>\n              </tr>\n            </thead>\n            <tbody>\n              \n              {this.state.messages.map(txt => (\n                //<tr style={{color: txt.teamAssigned==1 ? 'rgb(60,20,255)': 'rgb(255,20,60)'}} >\n                <tr style={{color: txt.teamAssigned==0 ? 'rgb(255,255,255)' : txt.teamAssigned==1 ? 'rgb(60,20,255)': 'rgb(255,20,60)'}} >\n                {txt.messageEmitted}\n                </tr>\n              ))}\n              \n            </tbody>\n          </Table>\n        </div>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Group controlId=\"formBasicMessage\">\n            <Form.Label>Type message</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={this.state.message}\n              onChange={this.handleChange}\n              placeholder=\"Enter message..\"\n            />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Send\n          </Button>\n        </Form>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default ChatBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ChatBox from \"./chatBox\";\nimport { Form, Button } from \"react-bootstrap\";\nimport * as io from \"socket.io-client\";\n\nimport { Popover } from \"react-bootstrap\";\nimport BlueFlag from './Images/BlueFlag.png'\nimport RedFlag from './Images/RedFlag.png'\n\nconst CELL_SIZE = 10;\nconst WIDTH = 1600;\nconst HEIGHT = 800;\n\n//const socket = io.connect(\"http://34.73.5.129:3474\"); //Testing\nconst socket = io.connect(\"http://34.73.5.129:7856\");   //Deploy\n\nclass Cell extends Component {\n  render() {\n    const { x, y, color } = this.props;\n    return (\n      <div\n        className=\"Cell\"\n        style={{\n          left: `${CELL_SIZE * x + 1}px`,\n          top: `${CELL_SIZE * y + 1}px`,\n          width: `${CELL_SIZE - 1}px`,\n          height: `${CELL_SIZE - 1}px`,\n          //background: color==1 ? 'rgb(0, 0, 255)' : 'rgb(255, 0, 0)',\n          background: color==0 ? 'rgb(255, 255, 255)' : color==1 ? 'rgb(60,20,255)': 'rgb(255,20,60)'  \n        }}\n      />\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n\n    this.state = {\n      cells: [],\n      usersOnline: 0,\n      typeOfPattern: \"2\",\n      iterations: 0,\n      teamAssigned: 0,\n      scores: {blue: 0, red: 0},\n      connectionStatus: socket.connected\n    };\n    this.handlePatternChange = this.handlePatternChange.bind(this);\n  }\n\n  componentDidMount() {\n    socket.on(\"cells\", data => this.setState({ cells: data }));\n    socket.on(\"usersOnlineUpdate\", data => this.setState({ usersOnline: data }));\n    socket.on(\"iterationsUpdate\", data => this.setState({ iterations: data }));\n    socket.on(\"teamAssigned\", data => this.setState({ teamAssigned: data }));\n    socket.on(\"scoresUpdate\", data => this.setState({ scores: data }));\n  }\n\n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    };\n  }\n\n  handleClick = event => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = event.clientX + getScrollFromLeft() - elemOffset.x;\n    const offsetY = event.clientY + getScrollFromTop() - elemOffset.y;\n\n    //if (this.state.teamAssigned==1 && offsetX)\n\n    // Only allow clicking on side of the screen where the user's flag is.\n    //Construct line from given points\n    let x1 = (1 / 4) * WIDTH;\n    let x2 = (3 / 4) * WIDTH;\n    let y1 = HEIGHT;\n    let y2 = 0;\n\n    function line (x){\n      return ((y2 - y1) / (x2 - x1) * (x - x1) + y1);\n    }\n\n    // Check if (x3|y3) is on top or bottom side\n    let x3 = offsetX;\n    let y3 = offsetY;\n    if (y3 - line(x3) < 0 && this.state.teamAssigned==2) {\n      console.log('Left');\n      return;\n    } else if (y3 - line(x3) > 0 && this.state.teamAssigned==1) {\n      return;\n      console.log('Right');\n    } else {\n      console.log('On line');\n    }\n\n\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n    console.log(x, y);\n\n    //console.log('scrollTOp: ', getScrollFromTop(), 'scrollleft: ', getScrollFromLeft() );\n\n    socket.emit(\"cellUpdate\", {\n      x: y,\n      y: x,\n      typeOfPattern: this.state.typeOfPattern,\n      teamAssigned: this.state.teamAssigned\n    });\n  };\n\n  handlePatternChange(event) {\n    this.setState({ typeOfPattern: event.target.value });\n  }\n\n  render() {\n    const { cells } = this.state;\n    return (\n      <div className=\"App\">\n\n\n\n        <div\n          className=\"Board\"\n          style={{\n            width: WIDTH,\n            height: HEIGHT,\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\n            \n          }}\n          onClick={this.handleClick}\n          ref={n => {\n            this.boardRef = n;\n          }}\n\n\n\n        >\n\n<img src={ BlueFlag }  style={{\n            width: '50px',\n            height: '50px',\n            marginTop: (HEIGHT/4),\n            marginLeft: (WIDTH/4),\n            //marginTop: '200px',\n            //marginLeft: '200px',\n            position: \"absolute\",\n          }}\n           \n        \n          />\n\n<img src={ RedFlag }  style={{\n            width: '50px',\n            height: '50px',\n            marginTop: (((HEIGHT/4*3-30))),\n            marginLeft: (WIDTH/4*3),\n            //marginTop: '200px',\n            //marginLeft: '200px',\n            position: \"absolute\"\n          }} />\n\n          {cells.map(cell => (\n            <Cell x={cell.x} y={cell.y} color={cell.color} key={`${cell.x},${cell.y}`} />\n          ))}\n\n<svg height=\"800\" width=\"1600\">\n  <line x1=\"400\" y1=\"800\" x2=\"1200\" y2=\"0\" style={{stroke: '#dfdfdf', strokeWidth: '2' }}/>\n</svg> \n\n\n\n\n        </div>\n\n        <div className=\"chat-sidebar\">\n          <div>\n            Server Status:\n            {socket.connected ? <span class=\"badge badge-success\">Connected</span> : <span class=\"badge badge-secondary\"> Waiting for connection.. </span> }\n            Users Online: {this.state.usersOnline} <br />\n            Pattern:\n            <select\n              class=\"mdb-select md-form\"\n              onChange={this.handlePatternChange}\n            >\n              <option value=\"1\" >\n                Blinker\n              </option>\n              <option value=\"2\" selected>Glider</option>\n              <option value=\"3\">Lightweight spaceship (LWSS)</option>\n            </select>\n\n            <div\n            style={{\n            color: this.state.teamAssigned==1 ? 'Blue' : 'Red',\n            fontSize: '20px'\n          }}>\n          You have been assigned team {this.state.teamAssigned==1 ? 'Blue, you need to capture red flag!' : 'Red, you need to capture blue flag!'} \n          </div>\n\n          How to play: You can click only on the side of the board where your flag is, once a cell touches the opponent's flag, your team scores. Be careful not to destroy your own flag!\n          If there's only one user online, the user gets to play against the server.\n\n          <br />\n          <img src={ BlueFlag }  style={{\n            width: '50px',\n            height: '50px',\n          }} /> {this.state.scores.blue}\n\n          <img src={ RedFlag }  style={{\n            width: '50px',\n            height: '50px',\n          }} /> {this.state.scores.red}\n\n        <br />\n            Iterations: {this.state.iterations}\n\n            <ChatBox passSocket={socket} teamAssigned={this.state.teamAssigned}/>\n          </div>\n        </div>\n\n        <div class=\"line\"></div>\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nfunction getScrollFromTop() {\n  return window.pageYOffset ||  //most browsers\n       (document.documentElement &&\n          document.documentElement.scrollTop) || //\n       document.body.scrollTop;\n}\n\nfunction getScrollFromLeft() {\n  return window.pageXOffset ||  //most browsers\n       (document.documentElement &&\n          document.documentElement.scrollLeft) || //\n       document.body.scrollLeft;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}